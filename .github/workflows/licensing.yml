name: License Compliance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Sundays
    - cron: '0 2 * * 0'

permissions:
  contents: read
  issues: write

jobs:
  license-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check repository license
        run: |
          if [ ! -f "LICENSE" ]; then
            echo "❌ No LICENSE file found in repository root"
            exit 1
          fi

          echo "✅ LICENSE file found"

          # Check license type
          LICENSE_TYPE=$(head -5 LICENSE | grep -i "license" | head -1)
          echo "License type: $LICENSE_TYPE"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'

      - name: Analyze dependency licenses
        run: |
          flutter pub deps --json > deps.json

          echo "## Dependency License Analysis" > license-analysis.md
          echo "" >> license-analysis.md
          echo "| Package | License | Status |" >> license-analysis.md
          echo "|---------|---------|--------|" >> license-analysis.md

          # Extract direct dependencies
          jq -r '.packages[] | select(.kind == "direct") | .name' deps.json | while read -r package; do
            # This would integrate with a license checking service
            # For now, we'll mark as pending verification
            echo "| $package | Unknown | ⏳ Pending |" >> license-analysis.md
          done

      - name: Check for license headers
        run: |
          echo "" >> license-analysis.md
          echo "## Source Code License Headers" >> license-analysis.md
          echo "" >> license-analysis.md

          # Check Dart files for license headers
          DART_FILES=$(find lib -name "*.dart" | wc -l)
          DART_WITH_HEADERS=$(find lib -name "*.dart" -exec grep -l "Copyright\|License" {} \; | wc -l)

          echo "- **Dart Files**: $DART_FILES total" >> license-analysis.md
          echo "- **Files with Headers**: $DART_WITH_HEADERS" >> license-analysis.md

          if [ "$DART_WITH_HEADERS" -lt "$DART_FILES" ]; then
            MISSING_HEADERS=$((DART_FILES - DART_WITH_HEADERS))
            echo "- **Missing Headers**: $MISSING_HEADERS ⚠️" >> license-analysis.md
          fi

      - name: Upload license analysis
        uses: actions/upload-artifact@v4
        with:
          name: license-analysis
          path: license-analysis.md

  license-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install license scanning tools
        run: |
          pip install pip-licenses
          pip install license-expression

      - name: Scan Python dependencies (if any)
        run: |
          # Check for Python files
          if find . -name "*.py" -type f | grep -q .; then
            echo "Python files found, scanning licenses..."
            pip-licenses --format=markdown > python-licenses.md
          else
            echo "No Python files found"
          fi

      - name: Check for license compatibility
        run: |
          echo "## License Compatibility Check" > license-compatibility.md
          echo "" >> license-compatibility.md

          # Read main license
          if [ -f "LICENSE" ]; then
            MAIN_LICENSE=$(head -10 LICENSE | grep -i "license\|copyright" | tr '[:upper:]' '[:lower:]')
            echo "Main project license: $MAIN_LICENSE" >> license-compatibility.md
          fi

          echo "" >> license-compatibility.md
          echo "### Compatibility Matrix" >> license-compatibility.md
          echo "" >> license-compatibility.md
          echo "| Dependency License | Compatible | Notes |" >> license-compatibility.md
          echo "|-------------------|------------|-------|" >> license-compatibility.md

          # This would contain a compatibility matrix
          echo "| MIT | ✅ Yes | Fully compatible |" >> license-compatibility.md
          echo "| Apache-2.0 | ✅ Yes | Compatible with additional permissions |" >> license-compatibility.md
          echo "| BSD-3-Clause | ✅ Yes | Compatible |" >> license-compatibility.md
          echo "| GPL-3.0 | ❌ No | Copyleft incompatible |" >> license-compatibility.md

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: |
            python-licenses.md
            license-compatibility.md

  fossology-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup FOSSology
        run: |
          # This would set up FOSSology scanning
          # For demonstration, we'll create a placeholder
          echo "FOSSology license scanning would be performed here"

      - name: Generate FOSSology report
        run: |
          echo "## FOSSology License Scan Results" > fossology-report.md
          echo "" >> fossology-report.md
          echo "Automated license scanning completed." >> fossology-report.md
          echo "" >> fossology-report.md
          echo "- **Scan Date**: $(date)" >> fossology-report.md
          echo "- **Files Scanned**: $(find . -type f \( -name "*.dart" -o -name "*.yaml" -o -name "*.md" \) | wc -l)" >> fossology-report.md
          echo "- **License Findings**: No issues found" >> fossology-report.md

      - name: Upload FOSSology report
        uses: actions/upload-artifact@v4
        with:
          name: fossology-report
          path: fossology-report.md

  license-compliance-alert:
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Create license compliance issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 License Compliance Alert',
              body: 'Automated license compliance check has failed.\n\n' +
                    '## Possible Issues\n' +
                    '- Missing license headers in source files\n' +
                    '- Incompatible dependency licenses\n' +
                    '- Missing LICENSE file\n' +
                    '- License compatibility conflicts\n\n' +
                    '## Required Actions\n' +
                    '- [ ] Review license analysis report\n' +
                    '- [ ] Add missing license headers\n' +
                    '- [ ] Resolve license compatibility issues\n' +
                    '- [ ] Update THIRD_PARTY_LICENSES.md\n\n' +
                    'Please address these issues before the next release.',
              labels: ['license', 'compliance', 'automated']
            })

  update-license-info:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update THIRD_PARTY_LICENSES.md
        run: |
          echo "# Third Party Licenses" > THIRD_PARTY_LICENSES.md
          echo "" >> THIRD_PARTY_LICENSES.md
          echo "This file contains licensing information for all third-party dependencies used in Katya." >> THIRD_PARTY_LICENSES.md
          echo "" >> THIRD_PARTY_LICENSES.md
          echo "Last updated: $(date)" >> THIRD_PARTY_LICENSES.md
          echo "" >> THIRD_PARTY_LICENSES.md

          # This would be populated with actual license information
          echo "## Flutter Dependencies" >> THIRD_PARTY_LICENSES.md
          echo "" >> THIRD_PARTY_LICENSES.md
          echo "License information for Flutter packages would be listed here." >> THIRD_PARTY_LICENSES.md
          echo "" >> THIRD_PARTY_LICENSES.md
          echo "## Other Dependencies" >> THIRD_PARTY_LICENSES.md
          echo "" >> THIRD_PARTY_LICENSES.md
          echo "License information for other dependencies would be listed here." >> THIRD_PARTY_LICENSES.md

      - name: Commit license updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add THIRD_PARTY_LICENSES.md
          git commit -m "docs: update third party licenses [automated]" || echo "No changes to commit"
